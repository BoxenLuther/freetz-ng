name: dl-toolchains

on:
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/dl-toolchains.yml'
      - 'tools/dl-toolchains_*'
      - 'config/mod/dl-toolchain.in'
#     - 'make/toolchain/'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    container:
#     image: ubuntu:20.04
#     image: freetzng/dl-packs
      image: ghcr.io/freetz-ng/dl-packs
    strategy:
      fail-fast: false
      max-parallel: 15
      matrix:
        fritz: [ 
          "_WLAN        _FIRMWARE_04_XX",
          "_7270_V1     _FIRMWARE_04_XX  FREETZ_TARGET_IPV6_SUPPORT",
          "_7270_V3     _FIRMWARE_06_0X",
          "_7390        _FIRMWARE_05_2X",
          "_7390        _FIRMWARE_06_0X",
          "_7390        _FIRMWARE_06_2X",
          "_7490        _FIRMWARE_06_5X",
          "_7490        _FIRMWARE_07_2X",
          "_7580        _FIRMWARE_06_8X",
          "_7590_W5     _FIRMWARE_07_0X",
          "_7590_W5     _FIRMWARE_07_2X",
          "_7590_W5     _FIRMWARE_07_5X",
          "_1750        _FIRMWARE_07_0X",
          "_1750        _FIRMWARE_07_2X",
          "_7581        _FIRMWARE_07_1X",
          "_7530_W6_V1  _FIRMWARE_07_2X",
          "_7530_W6_V1  _FIRMWARE_07_5X",
          "_4040        _FIRMWARE_07_0X",
          "_1200_W5     _FIRMWARE_07_2X",
          "_7690        _FIRMWARE_07_5X",
          "_5590        _FIRMWARE_08_0X",
          "_6490        _FIRMWARE_06_8X",
          "_6590        _FIRMWARE_07_0X",
          "_6590        _FIRMWARE_07_2X",
          "_6591        _FIRMWARE_07_0X",
          "_6660        _FIRMWARE_07_1X",
          "_6660        _FIRMWARE_07_2X",
          "_6670        _FIRMWARE_07_5X",
          "_6690        _FIRMWARE_07_5X",
          "_6670        _FIRMWARE_08_0X",
         ]
    runs-on: ubuntu-latest

    steps:

      - name: args
        id: args
        run: |
          export ARGS="$(for x in ${{ matrix.fritz }}; do echo -n "$x " | sed 's/^_/FREETZ_TYPE_/'; done)"
          echo "args='$ARGS'" >> $GITHUB_OUTPUT
          echo "################################################################" && bash -c "echo ARGS='$ARGS'"

#     - name: update
#       run: apt-get -y update && apt-get -y upgrade && apt-get -y dist-upgrade
#
#     - name: install
#       run: |
#         DEBIAN_FRONTEND=noninteractive apt-get -y install \
#           locales bash \
#           pv cpio rsync kmod imagemagick inkscape graphicsmagick subversion git bc unar wget sudo gcc g++ binutils autoconf automake \
#           autopoint libtool-bin make bzip2 libncurses5-dev libreadline-dev zlib1g-dev flex bison patch texinfo tofrodos gettext pkg-config ecj \
#           perl libstring-crc32-perl ruby ruby1.9 gawk libusb-dev unzip intltool libacl1-dev libcap-dev libc6-dev-i386 lib32ncurses5-dev \
#           gcc-multilib bsdmainutils lib32stdc++6 libglib2.0-dev ccache cmake lib32z1-dev libsqlite3-dev sqlite3 libzstd-dev netcat curl \
#           uuid-dev libssl-dev libgnutls28-dev u-boot-tools device-tree-compiler openssl build-essential libelf-dev
#
#     - name: locale
#       run: locale-gen en_US.utf8 && locale-gen de_DE.UTF-8 && update-locale

      - name: clone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          umask 0022
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git clone https://github-actions:$GITHUB_TOKEN@${GITHUB_SERVER_URL##*/}/$GITHUB_REPOSITORY.git $GITHUB_WORKSPACE --branch $GITHUB_REF_NAME

      - name: cache
        uses: actions/cache@v4
        with:
          path: |
            dl/*
            !dl/*-freetz-*-shared-glibc.tar.lzma
          key: ${{ github.workflow }}

      - name: version
        id: version
        run: |
          export VERSION="r$(tools/freetz_revision short)"
          [ -n "$VERSION" ] && echo "version=$VERSION" >> $GITHUB_OUTPUT || exit 1
          echo "################################################################" && bash -c "echo VERSION=$VERSION"

      - name: generate
        env:
          ACTIONS_VERSION: ${{ steps.version.outputs.version }}
        run: |
          mkdir -p dl/ 2>/dev/null || true
          useradd freetz -s $(which bash) -d $(pwd) -M && chown freetz . -R
          su freetz -c "umask 0022 && tools/dl-toolchains_make $ACTIONS_VERSION ${{ steps.args.outputs.args }}"

      - name: result
        env:
          ACTIONS_VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "################################################################"
          su freetz -c "umask 0022 && tools/dl-toolchains_eval $ACTIONS_VERSION all | grep -v '"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"'"

#     - name: cleanup
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         ACTIONS_VERSION: ${{ steps.version.outputs.version }}
#       run: |
#         git config --global --add safe.directory $GITHUB_WORKSPACE
#         git config --local credential.helper '!x() { echo "password=$GITHUB_TOKEN"; };x'
#         for x in $(git tag | grep -v "_$ACTIONS_VERSION$" | grep 'dl-toolchains_'); do git tag -d $x && git push --delete origin $x || true; done

      - name: release
        uses: ncipollo/release-action@v1
        with:
          tag: dl-toolchains_${{ steps.version.outputs.version }}
          name: dl-toolchains-${{ steps.version.outputs.version }}
          body: These files are internally used!
          prerelease: true
          allowUpdates: true
          removeArtifacts: false
          artifacts: "dl/*-freetz-${{ steps.version.outputs.version }}-shared-glibc.tar.lzma"
          token: ${{ secrets.GITHUB_TOKEN }}
          replacesArtifacts: true
          artifactErrorsFailBuild: true
          draft: true


